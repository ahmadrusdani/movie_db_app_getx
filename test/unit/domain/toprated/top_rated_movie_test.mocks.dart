// Mocks generated by Mockito 5.4.4 from annotations
// in movie_db_app_getx/test/unit/domain/toprated/top_rated_movie_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_db_app_getx/data/model/base/base_response.dart' as _i4;
import 'package:movie_db_app_getx/data/model/detail/movie_detail_model.dart'
    as _i6;
import 'package:movie_db_app_getx/data/model/movie/movie_model.dart' as _i5;
import 'package:movie_db_app_getx/domain/repository/movie_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i2.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.BaseResponseList<List<_i5.MovieModel>>?> getNowPlayingMovie(
          {int? page = 1}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNowPlayingMovie,
          [],
          {#page: page},
        ),
        returnValue:
            _i3.Future<_i4.BaseResponseList<List<_i5.MovieModel>>?>.value(),
      ) as _i3.Future<_i4.BaseResponseList<List<_i5.MovieModel>>?>);

  @override
  _i3.Future<_i4.BaseResponseList<List<_i5.MovieModel>>?> getPopularMovie(
          {int? page = 1}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularMovie,
          [],
          {#page: page},
        ),
        returnValue:
            _i3.Future<_i4.BaseResponseList<List<_i5.MovieModel>>?>.value(),
      ) as _i3.Future<_i4.BaseResponseList<List<_i5.MovieModel>>?>);

  @override
  _i3.Future<_i4.BaseResponseList<List<_i5.MovieModel>>?> getTopRatedMovie(
          {int? page = 1}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopRatedMovie,
          [],
          {#page: page},
        ),
        returnValue:
            _i3.Future<_i4.BaseResponseList<List<_i5.MovieModel>>?>.value(),
      ) as _i3.Future<_i4.BaseResponseList<List<_i5.MovieModel>>?>);

  @override
  _i3.Future<_i4.BaseResponseList<List<_i5.MovieModel>>?> getUpcomingMovie(
          {int? page = 1}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUpcomingMovie,
          [],
          {#page: page},
        ),
        returnValue:
            _i3.Future<_i4.BaseResponseList<List<_i5.MovieModel>>?>.value(),
      ) as _i3.Future<_i4.BaseResponseList<List<_i5.MovieModel>>?>);

  @override
  _i3.Future<_i6.MovieDetailModel?> getDetailMovie({required int? movieId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDetailMovie,
          [],
          {#movieId: movieId},
        ),
        returnValue: _i3.Future<_i6.MovieDetailModel?>.value(),
      ) as _i3.Future<_i6.MovieDetailModel?>);

  @override
  _i3.Future<_i4.BaseResponseList<List<_i5.MovieModel>>?> getSearchMovie({
    required String? query,
    int? page = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSearchMovie,
          [],
          {
            #query: query,
            #page: page,
          },
        ),
        returnValue:
            _i3.Future<_i4.BaseResponseList<List<_i5.MovieModel>>?>.value(),
      ) as _i3.Future<_i4.BaseResponseList<List<_i5.MovieModel>>?>);
}
